{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Desktop\\\\EcoDrive Simulator\\\\src\\\\components\\\\TelemetryGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './TelemetryGraph.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TelemetryGraph = ({\n  track\n}) => {\n  _s();\n  const [telemetryData, setTelemetryData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const eventSourceRef = useRef(null);\n  useEffect(() => {\n    loadTelemetryData();\n    startRealTimeStream();\n    return () => {\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n      }\n    };\n  }, [track]);\n  const loadTelemetryData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:5000/api/telemetry/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          duration: 120,\n          // 2 minutes\n          points: 200\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        setTelemetryData(result);\n      } else {\n        throw new Error(result.error || 'Failed to load telemetry data');\n      }\n    } catch (err) {\n      console.error('Error loading telemetry data:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const formatSpeed = speed => {\n    return `${Math.round(speed)} km/h`;\n  };\n  const formatPercentage = value => {\n    return `${Math.round(value)}%`;\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"telemetry-graph loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading telemetry data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"telemetry-graph error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error loading telemetry: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadTelemetryData,\n        className: \"retry-button\",\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n  if (!telemetryData || !telemetryData.ai_telemetry) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"telemetry-graph no-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No telemetry data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadTelemetryData,\n        className: \"retry-button\",\n        children: \"Load Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Prepare data for the chart\n  const chartData = telemetryData.ai_telemetry.map((point, index) => {\n    var _telemetryData$hamilt, _telemetryData$hamilt2, _telemetryData$hamilt3, _telemetryData$hamilt4, _telemetryData$hamilt5;\n    return {\n      time: formatTime(point.time),\n      timeValue: point.time,\n      aiSpeed: point.speed,\n      aiThrottle: point.throttle,\n      aiBrake: point.brake,\n      aiSteering: point.steering,\n      aiEnergy: point.energy || 0,\n      aiCo2Saved: point.co2_saved || 0,\n      hamiltonSpeed: ((_telemetryData$hamilt = telemetryData.hamilton_telemetry[index]) === null || _telemetryData$hamilt === void 0 ? void 0 : _telemetryData$hamilt.speed) || 0,\n      hamiltonThrottle: ((_telemetryData$hamilt2 = telemetryData.hamilton_telemetry[index]) === null || _telemetryData$hamilt2 === void 0 ? void 0 : _telemetryData$hamilt2.throttle) || 0,\n      hamiltonBrake: ((_telemetryData$hamilt3 = telemetryData.hamilton_telemetry[index]) === null || _telemetryData$hamilt3 === void 0 ? void 0 : _telemetryData$hamilt3.brake) || 0,\n      hamiltonSteering: ((_telemetryData$hamilt4 = telemetryData.hamilton_telemetry[index]) === null || _telemetryData$hamilt4 === void 0 ? void 0 : _telemetryData$hamilt4.steering) || 0,\n      hamiltonEnergy: ((_telemetryData$hamilt5 = telemetryData.hamilton_telemetry[index]) === null || _telemetryData$hamilt5 === void 0 ? void 0 : _telemetryData$hamilt5.energy) || 0\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"telemetry-graph\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"telemetry-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Live Telemetry Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"telemetry-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadTelemetryData,\n          className: \"refresh-button\",\n          children: \"Refresh Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"telemetry-charts\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Speed Comparison\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 200,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"rgba(255,255,255,0.1)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"time\",\n              stroke: \"rgba(255,255,255,0.7)\",\n              fontSize: 12\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"rgba(255,255,255,0.7)\",\n              fontSize: 12,\n              label: {\n                value: 'km/h',\n                angle: -90,\n                position: 'insideLeft'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name) => [formatSpeed(value), name],\n              labelFormatter: label => `Time: ${label}`,\n              contentStyle: {\n                backgroundColor: 'rgba(0,0,0,0.8)',\n                border: '1px solid rgba(255,255,255,0.2)',\n                borderRadius: '8px',\n                color: '#ffffff'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"aiSpeed\",\n              stroke: \"#00ff88\",\n              strokeWidth: 2,\n              name: \"AI Speed\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this), telemetryData.hamilton_telemetry.length > 0 && /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"hamiltonSpeed\",\n              stroke: \"#ff6b35\",\n              strokeWidth: 2,\n              name: \"Hamilton Speed\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Throttle & Brake Input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 200,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"rgba(255,255,255,0.1)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"time\",\n              stroke: \"rgba(255,255,255,0.7)\",\n              fontSize: 12\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"rgba(255,255,255,0.7)\",\n              fontSize: 12,\n              label: {\n                value: '%',\n                angle: -90,\n                position: 'insideLeft'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name) => [formatPercentage(value), name],\n              labelFormatter: label => `Time: ${label}`,\n              contentStyle: {\n                backgroundColor: 'rgba(0,0,0,0.8)',\n                border: '1px solid rgba(255,255,255,0.2)',\n                borderRadius: '8px',\n                color: '#ffffff'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"aiThrottle\",\n              stroke: \"#00ff88\",\n              strokeWidth: 2,\n              name: \"AI Throttle\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"aiBrake\",\n              stroke: \"#ff4444\",\n              strokeWidth: 2,\n              name: \"AI Brake\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), telemetryData.hamilton_telemetry.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"hamiltonThrottle\",\n                stroke: \"#ff6b35\",\n                strokeWidth: 2,\n                strokeDasharray: \"5 5\",\n                name: \"Hamilton Throttle\",\n                dot: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"hamiltonBrake\",\n                stroke: \"#ff9999\",\n                strokeWidth: 2,\n                strokeDasharray: \"5 5\",\n                name: \"Hamilton Brake\",\n                dot: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Steering Input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 200,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"rgba(255,255,255,0.1)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"time\",\n              stroke: \"rgba(255,255,255,0.7)\",\n              fontSize: 12\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"rgba(255,255,255,0.7)\",\n              fontSize: 12,\n              label: {\n                value: '%',\n                angle: -90,\n                position: 'insideLeft'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name) => [formatPercentage(value), name],\n              labelFormatter: label => `Time: ${label}`,\n              contentStyle: {\n                backgroundColor: 'rgba(0,0,0,0.8)',\n                border: '1px solid rgba(255,255,255,0.2)',\n                borderRadius: '8px',\n                color: '#ffffff'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"aiSteering\",\n              stroke: \"#00ff88\",\n              strokeWidth: 2,\n              name: \"AI Steering\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this), telemetryData.hamilton_telemetry.length > 0 && /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"hamiltonSteering\",\n              stroke: \"#ff6b35\",\n              strokeWidth: 2,\n              strokeDasharray: \"5 5\",\n              name: \"Hamilton Steering\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Energy Consumption & CO\\u2082 Savings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 200,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"rgba(255,255,255,0.1)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"time\",\n              stroke: \"rgba(255,255,255,0.7)\",\n              fontSize: 12\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"rgba(255,255,255,0.7)\",\n              fontSize: 12\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name) => {\n                if (name.includes('CO₂')) {\n                  return [`${value.toFixed(3)} kg`, name];\n                }\n                return [`${value.toFixed(2)} kWh`, name];\n              },\n              labelFormatter: label => `Time: ${label}`,\n              contentStyle: {\n                backgroundColor: 'rgba(0,0,0,0.8)',\n                border: '1px solid rgba(255,255,255,0.2)',\n                borderRadius: '8px',\n                color: '#ffffff'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"aiEnergy\",\n              stroke: \"#00ff88\",\n              strokeWidth: 2,\n              name: \"AI Energy\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"aiCo2Saved\",\n              stroke: \"#88ff00\",\n              strokeWidth: 2,\n              name: \"AI CO\\u2082 Saved\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), telemetryData.hamilton_telemetry.length > 0 && /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"hamiltonEnergy\",\n              stroke: \"#ff6b35\",\n              strokeWidth: 2,\n              strokeDasharray: \"5 5\",\n              name: \"Hamilton Energy\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"telemetry-summary\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Total Points:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: telemetryData.points\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Duration:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: formatTime(telemetryData.duration)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Data Source:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: telemetryData.hamilton_telemetry.length > 0 ? 'Real Simulation' : 'Mock Data'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(TelemetryGraph, \"pfesdRRY33eoP4OeBxEdEAngvrI=\");\n_c = TelemetryGraph;\nexport default TelemetryGraph;\nvar _c;\n$RefreshReg$(_c, \"TelemetryGraph\");","map":{"version":3,"names":["React","useState","useEffect","useRef","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","TelemetryGraph","track","_s","telemetryData","setTelemetryData","loading","setLoading","error","setError","isStreaming","setIsStreaming","eventSourceRef","loadTelemetryData","startRealTimeStream","current","close","response","fetch","method","headers","body","JSON","stringify","duration","points","result","json","success","Error","err","console","message","formatTime","time","minutes","Math","floor","seconds","toString","padStart","formatSpeed","speed","round","formatPercentage","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ai_telemetry","chartData","map","point","index","_telemetryData$hamilt","_telemetryData$hamilt2","_telemetryData$hamilt3","_telemetryData$hamilt4","_telemetryData$hamilt5","timeValue","aiSpeed","aiThrottle","throttle","aiBrake","brake","aiSteering","steering","aiEnergy","energy","aiCo2Saved","co2_saved","hamiltonSpeed","hamilton_telemetry","hamiltonThrottle","hamiltonBrake","hamiltonSteering","hamiltonEnergy","width","height","data","strokeDasharray","stroke","dataKey","fontSize","label","angle","position","formatter","name","labelFormatter","contentStyle","backgroundColor","border","borderRadius","color","type","strokeWidth","dot","length","includes","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Hp/Desktop/EcoDrive Simulator/src/components/TelemetryGraph.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport './TelemetryGraph.css';\r\n\r\nconst TelemetryGraph = ({ track }) => {\r\n  const [telemetryData, setTelemetryData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n  const eventSourceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    loadTelemetryData();\r\n    startRealTimeStream();\r\n    \r\n    return () => {\r\n      if (eventSourceRef.current) {\r\n        eventSourceRef.current.close();\r\n      }\r\n    };\r\n  }, [track]);\r\n\r\n  const loadTelemetryData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch('http://localhost:5000/api/telemetry/generate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          duration: 120, // 2 minutes\r\n          points: 200\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        setTelemetryData(result);\r\n      } else {\r\n        throw new Error(result.error || 'Failed to load telemetry data');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading telemetry data:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const formatSpeed = (speed) => {\r\n    return `${Math.round(speed)} km/h`;\r\n  };\r\n\r\n  const formatPercentage = (value) => {\r\n    return `${Math.round(value)}%`;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"telemetry-graph loading\">\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Loading telemetry data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"telemetry-graph error\">\r\n        <p>Error loading telemetry: {error}</p>\r\n        <button onClick={loadTelemetryData} className=\"retry-button\">\r\n          Retry\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!telemetryData || !telemetryData.ai_telemetry) {\r\n    return (\r\n      <div className=\"telemetry-graph no-data\">\r\n        <p>No telemetry data available</p>\r\n        <button onClick={loadTelemetryData} className=\"retry-button\">\r\n          Load Data\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Prepare data for the chart\r\n  const chartData = telemetryData.ai_telemetry.map((point, index) => ({\r\n    time: formatTime(point.time),\r\n    timeValue: point.time,\r\n    aiSpeed: point.speed,\r\n    aiThrottle: point.throttle,\r\n    aiBrake: point.brake,\r\n    aiSteering: point.steering,\r\n    aiEnergy: point.energy || 0,\r\n    aiCo2Saved: point.co2_saved || 0,\r\n    hamiltonSpeed: telemetryData.hamilton_telemetry[index]?.speed || 0,\r\n    hamiltonThrottle: telemetryData.hamilton_telemetry[index]?.throttle || 0,\r\n    hamiltonBrake: telemetryData.hamilton_telemetry[index]?.brake || 0,\r\n    hamiltonSteering: telemetryData.hamilton_telemetry[index]?.steering || 0,\r\n    hamiltonEnergy: telemetryData.hamilton_telemetry[index]?.energy || 0\r\n  }));\r\n\r\n  return (\r\n    <div className=\"telemetry-graph\">\r\n      <div className=\"telemetry-header\">\r\n        <h3>Live Telemetry Analysis</h3>\r\n        <div className=\"telemetry-controls\">\r\n          <button onClick={loadTelemetryData} className=\"refresh-button\">\r\n            Refresh Data\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"telemetry-charts\">\r\n        {/* Speed Comparison */}\r\n        <div className=\"chart-container\">\r\n          <h4>Speed Comparison</h4>\r\n          <ResponsiveContainer width=\"100%\" height={200}>\r\n            <LineChart data={chartData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\r\n              <XAxis \r\n                dataKey=\"time\" \r\n                stroke=\"rgba(255,255,255,0.7)\"\r\n                fontSize={12}\r\n              />\r\n              <YAxis \r\n                stroke=\"rgba(255,255,255,0.7)\"\r\n                fontSize={12}\r\n                label={{ value: 'km/h', angle: -90, position: 'insideLeft' }}\r\n              />\r\n              <Tooltip \r\n                formatter={(value, name) => [formatSpeed(value), name]}\r\n                labelFormatter={(label) => `Time: ${label}`}\r\n                contentStyle={{\r\n                  backgroundColor: 'rgba(0,0,0,0.8)',\r\n                  border: '1px solid rgba(255,255,255,0.2)',\r\n                  borderRadius: '8px',\r\n                  color: '#ffffff'\r\n                }}\r\n              />\r\n              <Legend />\r\n              <Line \r\n                type=\"monotone\" \r\n                dataKey=\"aiSpeed\" \r\n                stroke=\"#00ff88\" \r\n                strokeWidth={2}\r\n                name=\"AI Speed\"\r\n                dot={false}\r\n              />\r\n              {telemetryData.hamilton_telemetry.length > 0 && (\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"hamiltonSpeed\" \r\n                  stroke=\"#ff6b35\" \r\n                  strokeWidth={2}\r\n                  name=\"Hamilton Speed\"\r\n                  dot={false}\r\n                />\r\n              )}\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n        {/* Throttle & Brake */}\r\n        <div className=\"chart-container\">\r\n          <h4>Throttle & Brake Input</h4>\r\n          <ResponsiveContainer width=\"100%\" height={200}>\r\n            <LineChart data={chartData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\r\n              <XAxis \r\n                dataKey=\"time\" \r\n                stroke=\"rgba(255,255,255,0.7)\"\r\n                fontSize={12}\r\n              />\r\n              <YAxis \r\n                stroke=\"rgba(255,255,255,0.7)\"\r\n                fontSize={12}\r\n                label={{ value: '%', angle: -90, position: 'insideLeft' }}\r\n              />\r\n              <Tooltip \r\n                formatter={(value, name) => [formatPercentage(value), name]}\r\n                labelFormatter={(label) => `Time: ${label}`}\r\n                contentStyle={{\r\n                  backgroundColor: 'rgba(0,0,0,0.8)',\r\n                  border: '1px solid rgba(255,255,255,0.2)',\r\n                  borderRadius: '8px',\r\n                  color: '#ffffff'\r\n                }}\r\n              />\r\n              <Legend />\r\n              <Line \r\n                type=\"monotone\" \r\n                dataKey=\"aiThrottle\" \r\n                stroke=\"#00ff88\" \r\n                strokeWidth={2}\r\n                name=\"AI Throttle\"\r\n                dot={false}\r\n              />\r\n              <Line \r\n                type=\"monotone\" \r\n                dataKey=\"aiBrake\" \r\n                stroke=\"#ff4444\" \r\n                strokeWidth={2}\r\n                name=\"AI Brake\"\r\n                dot={false}\r\n              />\r\n              {telemetryData.hamilton_telemetry.length > 0 && (\r\n                <>\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"hamiltonThrottle\" \r\n                    stroke=\"#ff6b35\" \r\n                    strokeWidth={2}\r\n                    strokeDasharray=\"5 5\"\r\n                    name=\"Hamilton Throttle\"\r\n                    dot={false}\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"hamiltonBrake\" \r\n                    stroke=\"#ff9999\" \r\n                    strokeWidth={2}\r\n                    strokeDasharray=\"5 5\"\r\n                    name=\"Hamilton Brake\"\r\n                    dot={false}\r\n                  />\r\n                </>\r\n              )}\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n        {/* Steering */}\r\n        <div className=\"chart-container\">\r\n          <h4>Steering Input</h4>\r\n          <ResponsiveContainer width=\"100%\" height={200}>\r\n            <LineChart data={chartData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\r\n              <XAxis \r\n                dataKey=\"time\" \r\n                stroke=\"rgba(255,255,255,0.7)\"\r\n                fontSize={12}\r\n              />\r\n              <YAxis \r\n                stroke=\"rgba(255,255,255,0.7)\"\r\n                fontSize={12}\r\n                label={{ value: '%', angle: -90, position: 'insideLeft' }}\r\n              />\r\n              <Tooltip \r\n                formatter={(value, name) => [formatPercentage(value), name]}\r\n                labelFormatter={(label) => `Time: ${label}`}\r\n                contentStyle={{\r\n                  backgroundColor: 'rgba(0,0,0,0.8)',\r\n                  border: '1px solid rgba(255,255,255,0.2)',\r\n                  borderRadius: '8px',\r\n                  color: '#ffffff'\r\n                }}\r\n              />\r\n              <Legend />\r\n              <Line \r\n                type=\"monotone\" \r\n                dataKey=\"aiSteering\" \r\n                stroke=\"#00ff88\" \r\n                strokeWidth={2}\r\n                name=\"AI Steering\"\r\n                dot={false}\r\n              />\r\n              {telemetryData.hamilton_telemetry.length > 0 && (\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"hamiltonSteering\" \r\n                  stroke=\"#ff6b35\" \r\n                  strokeWidth={2}\r\n                  strokeDasharray=\"5 5\"\r\n                  name=\"Hamilton Steering\"\r\n                  dot={false}\r\n                />\r\n              )}\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n        {/* Energy & CO₂ */}\r\n        <div className=\"chart-container\">\r\n          <h4>Energy Consumption & CO₂ Savings</h4>\r\n          <ResponsiveContainer width=\"100%\" height={200}>\r\n            <LineChart data={chartData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\r\n              <XAxis \r\n                dataKey=\"time\" \r\n                stroke=\"rgba(255,255,255,0.7)\"\r\n                fontSize={12}\r\n              />\r\n              <YAxis \r\n                stroke=\"rgba(255,255,255,0.7)\"\r\n                fontSize={12}\r\n              />\r\n              <Tooltip \r\n                formatter={(value, name) => {\r\n                  if (name.includes('CO₂')) {\r\n                    return [`${value.toFixed(3)} kg`, name];\r\n                  }\r\n                  return [`${value.toFixed(2)} kWh`, name];\r\n                }}\r\n                labelFormatter={(label) => `Time: ${label}`}\r\n                contentStyle={{\r\n                  backgroundColor: 'rgba(0,0,0,0.8)',\r\n                  border: '1px solid rgba(255,255,255,0.2)',\r\n                  borderRadius: '8px',\r\n                  color: '#ffffff'\r\n                }}\r\n              />\r\n              <Legend />\r\n              <Line \r\n                type=\"monotone\" \r\n                dataKey=\"aiEnergy\" \r\n                stroke=\"#00ff88\" \r\n                strokeWidth={2}\r\n                name=\"AI Energy\"\r\n                dot={false}\r\n              />\r\n              <Line \r\n                type=\"monotone\" \r\n                dataKey=\"aiCo2Saved\" \r\n                stroke=\"#88ff00\" \r\n                strokeWidth={2}\r\n                name=\"AI CO₂ Saved\"\r\n                dot={false}\r\n              />\r\n              {telemetryData.hamilton_telemetry.length > 0 && (\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"hamiltonEnergy\" \r\n                  stroke=\"#ff6b35\" \r\n                  strokeWidth={2}\r\n                  strokeDasharray=\"5 5\"\r\n                  name=\"Hamilton Energy\"\r\n                  dot={false}\r\n                />\r\n              )}\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"telemetry-summary\">\r\n        <div className=\"summary-stats\">\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">Total Points:</span>\r\n            <span className=\"stat-value\">{telemetryData.points}</span>\r\n          </div>\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">Duration:</span>\r\n            <span className=\"stat-value\">{formatTime(telemetryData.duration)}</span>\r\n          </div>\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">Data Source:</span>\r\n            <span className=\"stat-value\">\r\n              {telemetryData.hamilton_telemetry.length > 0 ? 'Real Simulation' : 'Mock Data'}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TelemetryGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}